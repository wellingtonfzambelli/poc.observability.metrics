version: '3'

services:

  # API
  myapi:
    image: ${DOCKER_REGISTRY-}pocobservability
    container_name: api
    ports:
      - "8080:8080"
    networks:
      - observability-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Dockerfile


  # PROMETHEUS
  observability.prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/alert-rules.yaml:/etc/prometheus/alert-rulers.rules
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - observability-network


  # ALERT MANAGER
  observability.alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - "9093:9093"
    networks:
      - observability-network
    volumes:
      - ./prometheus/alert-manager.yaml:/prometheus/alert-manager.yaml
    command:
      - '--config.file=/prometheus/alert-manager.yaml'
    depends_on:
      - observability.prometheus


  # GRAFANA
  observability.grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - observability.prometheus
    networks:
      - observability-network


  # MYSQL SERVER
  observability.mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_DATABASE: "classicmodels"
      MYSQL_USER: "myuser"
      MYSQL_ROOT_PASSWORD: "123"
      MYSQL_PASSWORD: "123"
    ports:
      - "3316:3316"
    volumes:
      - ./mysql-script/volume-mysql:/var/lib/mysql
      - ./mysql-script/initial_script.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - observability-network


  # MYSQL EXPORTER
  # mysqld-exporter:
  #   image: prom/mysqld-exporter
  #   environment:
  #     DATA_SOURCE_NAME: "myuser:123@(mysql:3316)/classicmodels"
  #   ports:
  #     - "9104:9104"


  # ADMINER
  observability.adminer:
    image: adminer
    ports:
      - 8081:8080
    networks:
      - observability-network
   
    # Admire Auth
    # Server: "observability.mysql"
    # Username: "myuser"
    # Password: "123"
    # Database: "classicmodels"

volumes:
  grafana-storage:

networks:
  observability-network:
    driver: bridge